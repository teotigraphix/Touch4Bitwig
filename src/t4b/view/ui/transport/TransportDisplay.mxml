<?xml version="1.0"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// Copyright 2015 Michael Schmalle - Teoti Graphix, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License
//
// Author: Michael Schmalle, Principal Architect
// mschmalle at teotigraphix dot com
////////////////////////////////////////////////////////////////////////////////
-->
<f:Screen xmlns:f="library://ns.feathersui.com/mxml"
               xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:component="com.teotigraphix.ui.component.*"
               creationComplete="this_creationComplete()">

    <f:layout>
        <f:VerticalLayout padding="50"/>
    </f:layout>

    <component:HGroup percentWidth="100" percentHeight="100"
                      horizontalAlign="center" verticalAlign="middle">

        <component:HGroup>

            <component:layoutData>
                <f:HorizontalLayoutData percentWidth="100"/>
            </component:layoutData>

            <f:SpinnerList id="wholeSpinnerList"
                           dataProvider="{wholeDataProvider}"
                           change="spinnerList_changeHandler()">

            </f:SpinnerList>

            <f:SpinnerList id="fractionSpinnerList"
                           dataProvider="{fractionDataProvider}"
                           change="spinnerList_changeHandler()">

            </f:SpinnerList>

        </component:HGroup>

        <f:Label id="timeSignatureLabel" styleName="{StyleNames.TRANSPORT_DISPLAY_TIME_SIGNATURE}">
            <f:layoutData>
                <f:HorizontalLayoutData percentWidth="100"/>
            </f:layoutData>
        </f:Label>

        <f:Label id="timeLabel" text="00:00.00" styleName="{StyleNames.TRANSPORT_DISPLAY_TIME}">
            <f:layoutData>
                <f:HorizontalLayoutData percentWidth="100"/>
            </f:layoutData>
        </f:Label>

    </component:HGroup>

    <component:HGroup percentWidth="100" percentHeight="100"
                      gap="50"
                      horizontalAlign="center" verticalAlign="middle">

        <f:Button id="tapButton" label="TAP"
                  touch="tapButtonTriggered(event)">
            <f:layoutData>
                <f:HorizontalLayoutData percentWidth="100" percentHeight="100"/>
            </f:layoutData>
        </f:Button>

        <f:Label id="positionLabel" styleName="{StyleNames.TRANSPORT_DISPLAY_POSITION}"/>

    </component:HGroup>

    <fx:Script><![CDATA[
        import feathers.core.FeathersControl;
        import feathers.data.ListCollection;
        import feathers.layout.VerticalSpinnerLayout;
        
        import starling.events.Touch;
        import starling.events.TouchEvent;
        import starling.events.TouchPhase;
        
        import t4b.theme.StyleNames;
        
        public static const EVENT_TAP:String = "TransportDisplay/tap";
        public static const EVENT_TEMPO:String = "TransportDisplay/tempo";

        [Bindable]
        public var wholeDataProvider:ListCollection;

        [Bindable]
        public var fractionDataProvider:ListCollection;
        
        private var skipChange:Boolean;

        private var _tempoWhole:int = -1;
        private var _tempoFraction:int = -1;
        
        
        private var _wholeDataProvider:ListCollection;
        private var _fractionDataProvider:ListCollection;

        // TODO nasty callbacks from Bitwig on this, thus the checking for changes and values
        public function setTempo(value:String):void
        {
            value = parseFloat(value).toFixed(2);
            const split:Array = value.split(".");

            const tempoWhole:int = parseInt(split[0]);
            const tempoFraction:int = parseInt(split[1]);

            if (skipChange)
                return;

            if (_tempoWhole == tempoWhole && _tempoFraction == tempoFraction)
                return;

            _tempoWhole = tempoWhole;
            _tempoFraction = tempoFraction;

            skipChange = true;
            wholeSpinnerList.selectedIndex = getBPMToIndex(wholeDataProvider, tempoWhole);
            fractionSpinnerList.selectedIndex = getBPMToIndex(fractionDataProvider, tempoFraction);
            wholeSpinnerList.validate();
            fractionSpinnerList.validate();
            skipChange = false;
        }

        public function setTimeSignature(value:String):void
        {
            timeSignatureLabel.text = value;
        }

        public function setPosition(value:String):void
        {
            positionLabel.text = value;
        }

        public function setTime(value:String):void
        {
            timeLabel.text = value;
        }

        private function tapButtonTriggered(event:starling.events.TouchEvent):void
        {
            var touch:Touch = event.getTouch(this, TouchPhase.BEGAN);
            if (touch != null)
            {
                dispatchEventWith(EVENT_TAP, true);
            }
        }

        private function spinnerList_changeHandler():void
        {
            if (skipChange)
                return;

            if (_tempoWhole == -1 && _tempoFraction == -1)
                return;

            var fraction:String = fractionSpinnerList.selectedItem.bpm;
            if (fractionSpinnerList.selectedItem.bpm < 10)
                fraction = "0" + fraction;

            var result:String = (wholeSpinnerList.selectedItem.bpm) + "." + fraction;
            dispatchEventWith(EVENT_TEMPO, true, parseFloat(result));
        }

        private function this_creationComplete():void
        {
            VerticalSpinnerLayout(wholeSpinnerList.layout).requestedRowCount = 3;
            wholeSpinnerList.invalidate(FeathersControl.INVALIDATION_FLAG_SIZE);

            VerticalSpinnerLayout(fractionSpinnerList.layout).requestedRowCount = 3;
            fractionSpinnerList.invalidate(FeathersControl.INVALIDATION_FLAG_SIZE);
        }

        private static function getBPMToIndex(collection:ListCollection, bpm:int):int
        {
            const len:int = collection.length;
            for (var i:int = 0; i < len; i++)
            {
                if (collection.data[i].bpm == bpm)
                    return collection.data[i].index;
            }
            return 0;
        }
        ]]></fx:Script>


</f:Screen>