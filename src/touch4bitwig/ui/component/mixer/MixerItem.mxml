<?xml version="1.0"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// Copyright 2015 Michael Schmalle - Teoti Graphix, LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License
//
// Author: Michael Schmalle, Principal Architect
// mschmalle at teotigraphix dot com
////////////////////////////////////////////////////////////////////////////////
-->
<f:LayoutGroup xmlns:f="library://ns.feathersui.com/mxml"
               xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:component="com.teotigraphix.ui.component.*"
               xmlns:ui="com.teotigraphix.ui.component.*"
               implements="touch4bitwig.ui.component.mixer.IMixerItem">


    <f:layout>
        <f:VerticalLayout gap="10" paddingTop="6" horizontalAlign="center"/>
    </f:layout>

    <!--  -->
    <ui:UIBorder color="{trackColor}" minHeight="20"
                 touch="child_touchHandler(event)">
        <ui:layoutData>
            <f:VerticalLayoutData percentWidth="100"/>
        </ui:layoutData>
    </ui:UIBorder>

    <!--=====================================================================-->
    <!-- Icon, Name -->
    <!--=====================================================================-->

    <component:HGroup percentWidth="100" gap="5" paddingLeft="5" paddingRight="5">

        <!-- Can hold notes stack -->
        <f:LayoutGroup>
            <f:ImageLoader id="noteIcon" visible="false"
                           source="{AssetMap.getTexture('hold-notes-icon-skin')}"
                           width="18" height="18"/>
            <f:ImageLoader id="audioIcon"
                           source="{AssetMap.getTexture('hold-audio-icon-skin')}"
                           width="18" height="18"/>
        </f:LayoutGroup>

        <!--  -->
        <f:Label id="nameLabel"
                 text="{trackName}"
                 styleName="{StyleNames.MIXER_ITEM_NAME_LABEL}">
            <f:layoutData>
                <f:HorizontalLayoutData percentWidth="100"/>
            </f:layoutData>
        </f:Label>

    </component:HGroup>

    <!--=====================================================================-->
    <!-- Pan Label/Slider -->
    <!--=====================================================================-->

    <component:VGroup percentWidth="100" padding="5" gap="5" horizontalAlign="center">

        <f:Label text="{panString}"/>

        <ui:UISlider id="panSlider"
                     styleName="{StyleNames.MIXER_ITEM_PAN_SLIDER}"
                     direction="horizontal" minimum="0" maximum="127" step="1"
                     change="pan_changeHandler(panSlider.value)">
            <ui:layoutData>
                <f:VerticalLayoutData percentWidth="100"/>
            </ui:layoutData>
        </ui:UISlider>

    </component:VGroup>


    <!--=====================================================================-->
    <!-- Volume Label -->
    <!--=====================================================================-->

    <component:HGroup percentWidth="100" horizontalAlign="center">

        <f:Label text="{volumeString}" styleName="{StyleNames.MIXER_ITEM_VOLUME_LABEL}"/>

    </component:HGroup>


    <!--=====================================================================-->
    <!-- RecArm, Solo, Mute | Volume -->
    <!--=====================================================================-->

    <component:HGroup percentWidth="100" percentHeight="100" padding="5" gap="5" verticalAlign="bottom">

        <component:VGroup gap="4">
            <ui:UIToggleButton id="recarmButton" label="O" isToggle="true"
                               styleName="{StyleNames.MIXER_ITEM_RECARM_BUTTON}"
                               change="recarm_changeHandler(recarmButton.isSelected)"/>

            <ui:UIToggleButton id="soloButton" label="S" isToggle="true"
                               change="solo_changeHandler(soloButton.isSelected)"
                               styleName="{StyleNames.MIXER_ITEM_SOLO_BUTTON}"/>

            <ui:UIToggleButton id="muteButton" label="M" isToggle="true"
                               styleName="{StyleNames.MIXER_ITEM_MUTE_BUTTON}"
                               change="mute_changeHandler(muteButton.isSelected)"/>
        </component:VGroup>

        <component:HGroup backgroundSkin="{AssetMap.create9ScaleImage('background-skin', 5, 5, 22, 22)}"
                          percentWidth="100" percentHeight="100" padding="5" gap="4">

            <f:ProgressBar value="{vu}"
                           styleName="{StyleNames.MIXER_ITEM_VU_BAR}">
                <f:layoutData>
                    <f:HorizontalLayoutData percentHeight="100"/>
                </f:layoutData>
            </f:ProgressBar>

            <ui:UISlider id="volumeSlider"
                         styleName="{StyleNames.MIXER_ITEM_VOLUME_SLIDER}"
                         change="volume_changeHandler(volumeSlider.value)">
                <ui:layoutData>
                    <f:HorizontalLayoutData percentWidth="100" percentHeight="100"/>
                </ui:layoutData>
            </ui:UISlider>

        </component:HGroup>


    </component:HGroup>


    <fx:Script><![CDATA[
        import com.teotigraphix.ui.theme.AssetMap;

        import feathers.skins.IStyleProvider;

        import starling.display.DisplayObject;
        import starling.events.Touch;
        import starling.events.TouchEvent;
        import starling.events.TouchPhase;

        import touch4bitwig.theme.StyleNames;

        public static var globalStyleProvider:IStyleProvider;

        override protected function get defaultStyleProvider():IStyleProvider
        {
            return MixerItem.globalStyleProvider;
        }

        public static const EVENT_SELECT:String = "select";

        public static const EVENT_DOUBLE_TAP:String = "doubleTap";
        public static const EVENT_VOLUME_CHANGE:String = "volumeChange";
        public static const EVENT_PAN_CHANGE:String = "panChange";
        public static const EVENT_RECORD_CHANGE:String = "recordChange";
        public static const EVENT_SOLO_CHANGE:String = "soloChange";
        public static const EVENT_MUTE_CHANGE:String = "muteChange";

        private static const INVALIDATE_FLAG_EXISTS:String = "exists";
        private static const INVALIDATE_FLAG_CAN_HOLD_NOTES:String = "canHoldNotes";
        private static const INVALIDATE_FLAG_SELECTED:String = "selected";
        private static const INVALIDATE_FLAG_TRACK_NAME:String = "trackName";
        private static const INVALIDATE_FLAG_TRACK_COLOR:String = "trackColor";
        private static const INVALIDATE_FLAG_PAN:String = "pan";
        private static const INVALIDATE_FLAG_VOLUME:String = "volume";
        private static const INVALIDATE_FLAG_RECORD:String = "record";
        private static const INVALIDATE_FLAG_SOLO:String = "solo";
        private static const INVALIDATE_FLAG_MUTE:String = "volume";
        private static const INVALIDATE_FLAG_VU:String = "vu";

        public var backgroundNormalSkin:starling.display.DisplayObject;
        public var backgroundSelectedSkin:starling.display.DisplayObject;

        private var _index:int;
        private var _exists:Boolean;
        private var _canHoldNotes:Boolean;
        private var _trackName:String;
        private var _trackColor:uint;
        private var _volumeValue:Number;
        private var _volumeString:String;
        private var _vuValue:Number;
        private var _panValue:Number;
        private var _panString:String;
        private var _isRecArm:Boolean;
        private var _isSolo:Boolean;
        private var _isMute:Boolean;

        private var _selected:Boolean;

        public function get index():int
        {
            return _index;
        }

        public function set index(value:int):void
        {
            _index = value;
        }

        public function get exists():Boolean
        {
            return _exists;
        }

        public function set exists(value:Boolean):void
        {
            _exists = value;
        }

        public function get canHoldNotes():Boolean
        {
            return _canHoldNotes;
        }

        public function set canHoldNotes(value:Boolean):void
        {
            _canHoldNotes = value;
            noteIcon.visible = value;
            audioIcon.visible = !value;
        }

        public function get trackName():String
        {
            return _trackName;
        }

        public function set trackName(value:String):void
        {
            _trackName = value;
        }

        public function get trackColor():uint
        {
            return _trackColor;
        }

        public function set trackColor(value:uint):void
        {
            _trackColor = value;
        }

        public function get volume():Number
        {
            return _volumeValue;
        }

        public function set volume(value:Number):void
        {
            _volumeValue = value;
            volumeSlider.setValue(value);
        }

        public function get volumeString():String
        {
            return _volumeString;
        }

        public function set volumeString(value:String):void
        {
            _volumeString = value;
        }

        public function get vu():Number
        {
            return _vuValue;
        }

        public function set vu(value:Number):void
        {
            _vuValue = value;
        }

        public function get pan():Number
        {
            return _panValue;
        }

        public function set pan(value:Number):void
        {
            _panValue = value;
            panSlider.setValue(value);
        }

        public function get panString():String
        {
            return _panString;
        }

        public function set panString(value:String):void
        {
            _panString = value;
        }

        public function get isRecArm():Boolean
        {
            return _isRecArm;
        }

        public function set isRecArm(value:Boolean):void
        {
            _isRecArm = value;
            recarmButton.setIsSelected(value);
        }

        public function get isSolo():Boolean
        {
            return _isSolo;
        }

        public function set isSolo(value:Boolean):void
        {
            _isSolo = value;
            soloButton.setIsSelected(value);
        }

        public function get isMute():Boolean
        {
            return _isMute;
        }

        public function set isMute(value:Boolean):void
        {
            _isMute = value;
            muteButton.setIsSelected(value);
        }

        //--------------------------------------------------------------------------
        // Public :: Properties
        //--------------------------------------------------------------------------

        public function get selected():Boolean
        {
            return _selected;
        }

        public function set selected(value:Boolean):void
        {
            _selected = value;
            invalidate(INVALIDATION_FLAG_SELECTED);
        }

        //--------------------------------------------------------------------------
        // Constructor
        //--------------------------------------------------------------------------

        public function MixerItemSkinBase()
        {
        }

        override protected function initialize():void
        {
            super.initialize();
        }

        override protected function draw():void
        {
            super.draw();

            if (isInvalid(INVALIDATION_FLAG_ALL))
            {
                backgroundSkin = backgroundNormalSkin;
            }

            if (_selected)
            {
                backgroundSkin = backgroundSelectedSkin;
            }
            else
            {
                backgroundSkin = backgroundNormalSkin;
            }
        }

        //--------------------------------------------------------------------------
        // Handlers
        //--------------------------------------------------------------------------

        protected function pan_changeHandler(value:Number):void
        {
            dispatchEventWith(EVENT_PAN_CHANGE, false, value);
        }

        protected function volume_changeHandler(value:Number):void
        {
            dispatchEventWith(EVENT_VOLUME_CHANGE, false, value);
        }

        protected function recarm_changeHandler(selected:Boolean):void
        {
            dispatchEventWith(EVENT_RECORD_CHANGE, false, selected);
        }

        protected function solo_changeHandler(selected:Boolean):void
        {
            dispatchEventWith(EVENT_SOLO_CHANGE, false, selected);
        }

        protected function mute_changeHandler(selected:Boolean):void
        {
            dispatchEventWith(EVENT_MUTE_CHANGE, false, selected);
        }

        private function child_touchHandler(event:starling.events.TouchEvent):void
        {
            var touch:Touch = event.getTouch(this, TouchPhase.BEGAN);
            if (touch != null)
            {
                dispatchEventWith(EVENT_SELECT, true, _index);
            }
        }
        ]]></fx:Script>
</f:LayoutGroup>